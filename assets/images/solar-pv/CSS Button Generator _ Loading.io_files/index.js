// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('loadingIO');
x$.service('ldBtnGeneratorBuilder', ['$rootScope', 'fileTool'].concat(function($rootScope, fileTool){
  var dir, makeShadow, makeGradient;
  dir = ['top', 'right', 'bottom', 'left'];
  makeShadow = function(c){
    var shadow, i$, i, s;
    shadow = [];
    for (i$ = 0; i$ <= 3; ++i$) {
      i = i$;
      s = c[i];
      if (!s) {
        continue;
      }
      if (s.x || s.y || s.blur || s.spread) {
        shadow.push([s.inset ? 'inset' : '', (s.x || 0) + "px", (s.y || 0) + "px", (s.blur || 0) + "px", s.spread ? s.spread + 'px' : '', s.color].filter(fn$).join(" "));
      }
    }
    if (shadow.length) {
      return shadow.join(',');
    }
    function fn$(it){
      return it;
    }
  };
  makeGradient = function(c){
    return [
      "linear-gradient(" + (c.angle || 0) + "deg,", c.value.colors.map(function(it){
        return it.value + " " + it.pos * 100 + "%";
      }).join(","), ")"
    ].join("");
  };
  return {
    all: function(c){
      var ret, this$ = this;
      ret = {};
      ['btn', 'text1', 'text2', 'icon', 'loader'].map(function(it){
        return [it, this$[it](c)];
      }).map(function(it){
        return ret[it[0]] = it[1];
      });
      return ret;
    },
    loader: function(c){
      var ret, that, value, k, v;
      c = c.loader;
      ret = {
        color: c.color,
        "font-size": (that = c.size) ? that + "px" : 'initial'
      };
      return value = (function(){
        var ref$, results$ = [];
        for (k in ref$ = ret) {
          v = ref$[k];
          results$.push({
            k: k,
            v: v
          });
        }
        return results$;
      }()).filter(function(it){
        return it.v != null;
      }).map(function(it){
        return it.k + ":" + it.v;
      }).join(';');
    },
    text1: function(c){
      var ret, that, i$, ref$, len$, name, value, k, v;
      c = c.text1;
      ret = {
        color: c.color,
        "font-size": (that = c.font.size) ? that + "px" : 'initial',
        "font-family": c.font.family || 'initial',
        "font-weight": c.font.weight || 'initial',
        "font-style": c.font.italic ? 'italic' : 'normal',
        "letter-spacing": c.font.letterSpacing != null ? c.font.letterSpacing + "px" : void 8
      };
      for (i$ = 0, len$ = (ref$ = [['textShadow', 'text-shadow']]).length; i$ < len$; ++i$) {
        name = ref$[i$];
        if (c[name[0]]) {
          ret[name[1]] = makeShadow(c[name[0]]);
        }
      }
      return value = (function(){
        var ref$, results$ = [];
        for (k in ref$ = ret) {
          v = ref$[k];
          results$.push({
            k: k,
            v: v
          });
        }
        return results$;
      }()).filter(function(it){
        return it.v != null;
      }).map(function(it){
        return it.k + ":" + it.v;
      }).join(';');
    },
    text2: function(c){
      var ret, that, i$, ref$, len$, name, value, k, v;
      c = c.text2;
      ret = {
        color: c.color,
        "font-size": (that = c.font.size) ? that + "px" : 'initial',
        "font-family": c.font.family || 'initial',
        "font-weight": c.font.weight || 'initial',
        "font-style": c.font.italic ? 'italic' : 'normal',
        "text-align": 'center',
        margin: dir.map(function(it){
          return (c.margin[it] || 0) + "px";
        }).join(' ')
      };
      for (i$ = 0, len$ = (ref$ = [['textShadow', 'text-shadow']]).length; i$ < len$; ++i$) {
        name = ref$[i$];
        if (c[name[0]]) {
          ret[name[1]] = makeShadow(c[name[0]]);
        }
      }
      return value = (function(){
        var ref$, results$ = [];
        for (k in ref$ = ret) {
          v = ref$[k];
          results$.push({
            k: k,
            v: v
          });
        }
        return results$;
      }()).filter(function(it){
        return it.v != null;
      }).map(function(it){
        return it.k + ":" + it.v;
      }).join(';');
    },
    btn: function(c){
      var ret, i$, ref$, len$, name, value, k, v;
      c = c.btn;
      ret = {
        "backface-visibility": 'hidden',
        position: 'relative',
        width: c.width != null && !c.autosize ? c.width + "px" : void 8,
        height: c.height != null && !c.autosize ? c.height + "px" : void 8,
        cursor: 'pointer',
        display: 'inline-block',
        "white-space": 'nowrap',
        background: (c.gradient || (c.gradient = {})).on
          ? makeGradient(c.gradient)
          : c.background,
        "border-radius": (c.border.radius || 0) + "px",
        border: (c.border.width.all || 0) + "px " + (c.border.style || 'solid') + " " + (c.border.color || 'transparent'),
        "border-width": dir.map(function(it){
          return (c.border.width[it] || 0) + "px";
        }).join(' '),
        padding: dir.map(function(it){
          return (c.padding[it] || 0) + "px";
        }).join(' ')
      };
      for (i$ = 0, len$ = (ref$ = [['boxShadow', 'box-shadow']]).length; i$ < len$; ++i$) {
        name = ref$[i$];
        if (c[name[0]]) {
          ret[name[1]] = makeShadow(c[name[0]]);
        }
      }
      return value = (function(){
        var ref$, results$ = [];
        for (k in ref$ = ret) {
          v = ref$[k];
          results$.push({
            k: k,
            v: v
          });
        }
        return results$;
      }()).filter(function(it){
        return it.v != null;
      }).map(function(it){
        return it.k + ":" + it.v;
      }).join(';');
    },
    icon: function(c){
      var ret, i$, ref$, len$, name, value, k, v;
      c = c.icon;
      ret = {
        color: c.color,
        "font-size": (c.font.size / 20 || 1) + "em",
        background: c.background,
        "border-radius": (c.border.radius || 0) + "px",
        border: (c.border.width.all || 0) + "px " + (c.border.style || 'solid') + " " + (c.border.color || 'transparent'),
        "border-width": dir.map(function(it){
          return (c.border.width[it] || 0) + "px";
        }).join(' '),
        padding: dir.map(function(it){
          return (c.padding[it] || 0) + "px";
        }).join(' '),
        margin: dir.map(function(it){
          return (c.margin[it] || 0) + "px";
        }).join(' '),
        position: c.position.position,
        top: c.position.top != null ? c.position.top + "px" : void 8,
        left: c.position.left != null ? c.position.left + "px" : void 8,
        bottom: c.position.bottom != null ? c.position.bottom + "px" : void 8,
        right: c.position.right != null ? c.position.right + "px" : void 8,
        width: c.position.width != null ? c.position.width + "px" : void 8,
        height: c.position.height != null ? c.position.height + "px" : void 8
      };
      for (i$ = 0, len$ = (ref$ = [['textShadow', 'text-shadow'], ['boxShadow', 'box-shadow']]).length; i$ < len$; ++i$) {
        name = ref$[i$];
        if (c[name[0]]) {
          ret[name[1]] = makeShadow(c[name[0]]);
        }
      }
      return value = (function(){
        var ref$, results$ = [];
        for (k in ref$ = ret) {
          v = ref$[k];
          results$.push({
            k: k,
            v: v
          });
        }
        return results$;
      }()).filter(function(it){
        return it.v != null;
      }).map(function(it){
        return it.k + ":" + it.v;
      }).join(';');
    }
  };
}));
x$.controller('ldBtnGenerator', ['$scope', '$timeout', '$http', 'fileTool', 'ldBtnPreset', 'ldNotify', 'ldAsset', 'ldBtnGeneratorBuilder'].concat(function($scope, $timeout, $http, fileTool, ldBtnPreset, ldNotify, ldAsset, ldBtnGeneratorBuilder){
  var dir, preset, k, v;
  console.log("generator");
  dir = ['top', 'right', 'bottom', 'left'];
  preset = ldBtnPreset;
  $scope.slidecfg = {
    base: {
      hide_min_max: true,
      hide_from_to: true,
      grid: true,
      min: 0,
      max: 100,
      step: 1
    },
    angle: {
      hide_min_max: true,
      hide_from_to: true,
      grid: true,
      min: 0,
      max: 360,
      step: 1
    },
    margin: {
      hide_min_max: true,
      hide_from_to: true,
      grid: true,
      min: -50,
      max: 50,
      step: 1
    },
    position: {
      hide_min_max: true,
      hide_from_to: true,
      grid: true,
      min: -100,
      max: 100,
      step: 0.5
    }
  };
  import$($scope, {
    tab: 'quicksettings',
    style: {}
  });
  $scope.$watch('tab', function(n, o){
    if (n && o && n !== 0) {
      return $scope.track('/button/generator/', 'tab', n);
    }
  });
  $scope.apply = function(c, dotrack){
    dotrack == null && (dotrack = true);
    import$($scope.ctrl, JSON.parse(JSON.stringify(c)));
    if (dotrack) {
      $scope.scrollto('#ads');
    }
    if (dotrack) {
      return $scope.track('/button/generator/', 'apply', c.name);
    }
  };
  $scope.save = function(){
    var ret;
    if ($scope.staticMode) {
      return;
    }
    if (!$scope.user.data) {
      return $scope.auth.ctrl.toggle();
    }
    $scope.loading = true;
    ret = {};
    return fileTool.domToArraybuffer(document.querySelector('.preview .inner'), 1200, 630).then(function(thumb){
      ret.thumb = thumb;
      return fileTool.domToArraybuffer(document.querySelector('.preview .inner'), 250, 120);
    }).then(function(preview){
      var fd;
      ret.preview = preview;
      fd = ldAsset.prepare('untitled', 'button', $scope.ctrl, ret.thumb, ret.preview);
      return ldAsset.save(fd, $scope.key)['finally'](function(){
        return $timeout(function(){
          return $scope.loading = false;
        }, 1000);
      }).then(function(ret){
        ldNotify.success("Saved.");
        if (!$scope.key || $scope.key !== ret.data.key) {
          window.location.href = "/button/generator/" + ret.data.key;
        }
        return $scope.key = ret.data.key;
      });
    })['catch'](function(){
      $timeout(function(){
        return $scope.loading = false;
      }, 1000);
      return ldNotify.danger("failed to save. try later?");
    });
  };
  $scope.build = {
    png: function(){
      $scope.loading = true;
      return fileTool.domToArraybuffer(document.querySelector('.preview .inner div')).then(function(buf){
        var url;
        url = URL.createObjectURL(new Blob([buf], {
          type: 'image/png'
        }));
        $scope.build.png.url = url;
        $scope.build.png.ctrl.toggle();
        $timeout(function(){
          return $scope.loading = false;
        }, 200);
        return $scope.track('/button/generator/', 'build-png', $scope.ctrl.name);
      })['catch'](function(){
        $timeout(function(){
          return $scope.loading = false;
        }, 200);
        return alert('failed to generate png...');
      });
    },
    css: function(c){
      var ret;
      ret = this.all(c);
      ret = ['btn', 'text1', 'text2', 'icon', 'loader'].map(function(n){
        return ret[n].split(';').map(function(it){
          return it.replace(/:/, ': ');
        }).join(";\n  ");
      });
      ret = [c.loader.on ? "<!-- sample html for this button-->" : '', c.loader.on ? '<link rel="stylesheet" type="text/css" href="//loading.io/css/loading.css"/>' : '', c.loader.on ? '<link rel="stylesheet" type="text/css" href="//loading.io/css/loading-btn.css"/>' : '', c.icon['class'] ? '<link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"/>' : '', "<!-- sample html for this button-->\n<div class=\"button" + (c.loader.on ? ' running ld ld-' + c.loader.type : '') + "\">", c.loader.on ? '  <div class="ld ld-' + c.loader.name + ' ld-' + c.loader.animation + '"></div>' : '', "  " + c.text1.content, "  <div>" + c.text2.content + "</div>", c.icon['class'] ? "  <i class=\"fa fa-" + c.icon['class'] + "\"></i>'" : '', "</div>\n<!-- stylesheet for this button -->\n<style type=\"text/css\">\n  .button {\n    " + ret[0] + ";\n    " + ret[1] + "\n  }\n  .button > div {\n    " + ret[2] + "\n  }\n  .button > i {\n    " + ret[3] + "\n  }\n  .button > .ld {\n    " + ret[4] + "\n  }\n</style>"].filter(function(it){
        return it;
      }).join('\n');
      $scope.track('/button/generator/', 'build-css', $scope.ctrl.name);
      this.css.output = ret;
      return this.css.ctrl.toggle();
    }
  };
  import$($scope.build, ldBtnGeneratorBuilder);
  $scope.$watch('ctrl.loader', function(){
    var ref$;
    return ((ref$ = $scope.style || ($scope.style = {})).loader || (ref$.loader = {})).value = $scope.build.loader($scope.ctrl);
  }, true);
  $scope.$watch('ctrl.text1', function(){
    var ref$;
    return ((ref$ = $scope.style || ($scope.style = {})).text1 || (ref$.text1 = {})).value = $scope.build.text1($scope.ctrl);
  }, true);
  $scope.$watch('ctrl.text2.margin.all', function(n){
    if (n != null) {
      return dir.map(function(it){
        return $scope.ctrl.text2.margin[it] = n;
      });
    }
  });
  $scope.$watch('ctrl.text2', function(){
    var ref$;
    return ((ref$ = $scope.style || ($scope.style = {})).text2 || (ref$.text2 = {})).value = $scope.build.text2($scope.ctrl);
  }, true);
  $scope.$watch('ctrl.btn.padding.all', function(n){
    if (n != null) {
      return dir.map(function(it){
        return $scope.ctrl.btn.padding[it] = n;
      });
    }
  });
  $scope.$watch('ctrl.btn.border.width.all', function(n){
    if (n != null) {
      return dir.map(function(it){
        return $scope.ctrl.btn.border.width[it] = n;
      });
    }
  });
  $scope.$watch('ctrl.btn', function(){
    var ref$;
    return ((ref$ = $scope.style || ($scope.style = {})).btn || (ref$.btn = {})).value = $scope.build.btn($scope.ctrl);
  }, true);
  $scope.$watch('ctrl.icon.padding.all', function(n){
    if (n != null) {
      return dir.map(function(it){
        return $scope.ctrl.icon.padding[it] = n;
      });
    }
  });
  $scope.$watch('ctrl.icon.margin.all', function(n){
    if (n != null) {
      return dir.map(function(it){
        return $scope.ctrl.icon.margin[it] = n;
      });
    }
  });
  $scope.$watch('ctrl.icon.border.width.all', function(n){
    if (n != null) {
      return dir.map(function(it){
        return $scope.ctrl.icon.border.width[it] = n;
      });
    }
  });
  $scope.$watch('ctrl.icon', function(){
    var ref$;
    return ((ref$ = $scope.style || ($scope.style = {})).icon || (ref$.icon = {})).value = $scope.build.icon($scope.ctrl);
  }, true);
  preset.reset($scope.ctrl || ($scope.ctrl = {}));
  $scope.gallery = (function(){
    var ref$, results$ = [];
    for (k in ref$ = preset.gallery) {
      v = ref$[k];
      results$.push({
        k: k,
        v: v
      });
    }
    return results$;
  }()).map(function(it){
    return {
      key: k,
      style: $scope.build.all(it.v),
      ctrl: it.v
    };
  });
  if (window.asset) {
    import$($scope.ctrl, window.asset.payload);
    return $scope.key = window.asset.key;
  } else {
    return $scope.apply($scope.gallery[14].ctrl, false);
  }
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}